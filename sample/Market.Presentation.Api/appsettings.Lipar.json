{
  "LiparOptions": {
    "ServiceId": "MarketService",
    "ApiVersion": {
      "Version": 1.0
    },
    "Mail": {
      "EmailFrom": "arzaniketabbook@gmail.com",
      "SmtpHost": "smtp.gmail.com",
      "SmtpPort": 587,
      "SmtpUser": "arzaniketabbook",
      "SmtpPass": "test$1234",
      "DisplayName": "Market Shop"
    },
    "Swagger": {
      "Name": "Market v1.0",
      "Url": "/swagger/v1/swagger.json",
      "Title": "Market v1.0",
      "Version": "v1"
    },
    "Translation": {
      "ConnectionString": "Server=.;Database=Market;user id=sa;password=V@hid031;",
      "AutoCreateSqlTable": true,
      "TableName": "_ParrotTranslations",
      "SchemaName": "dbo"
    },
    "OutBoxEvent": {
      "ConnectionString": "Server=.;Database=Market;user id=sa;password=V@hid031;",
      "SelectCommand": "Select top {0} * from _OutBoxEvents where IsProcessed = 0",
      "UpdateCommand": "Update _OutBoxEvents set IsProcessed = 1 where Id in ({0})",
      "InsertCommand": "INSERT INTO _OutBoxEvents(Id, AccuredByUserId, AccuredOn, AggregateName, AggregateTypeName, AggregateId, EventName, EventTypeName, EventPayload, IsProcessed) VALUES(@Id, @AccuredByUserId, @AccuredOn, @AggregateName, @AggregateTypeName, @AggregateId, @EventName, @EventTypeName, @EventPayload, @IsProcessed)"
    },
    "EntityChangesInterception": {
      "ConnectionString": "Server=.;Database=Market;user id=sa;password=V@hid031;"
    },
    "PoolingPublisher": {
      "SendOutBoxInterval": 10,
      "SendOutBoxCount": 50
    },
    "MessageBus": {
      "RabbitMQ": {
        "Username": "guest",
        "Password": "guest",
        "Host": "localhost",
        "Port": "5672",
        "VirualHost": "/",
        "Protocol": "amqp",
        "ExchangeName": "MarketExchange",
        "ExchangeDurable": false,
        "ExchangeAutoDeleted": false
      },
      "Events": [
        {
          "ServiceId": "MarketService",
          "EventName": "ProductCreated",
          "MapToClass": "Market.Core.Domain.Products.Events.ProductCreated"
        }
      ]
    }
  }
}
